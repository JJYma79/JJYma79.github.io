# renv::equip() function will download external software commonly used when compiling R packages from sources,
# and instruct R to use that software during compilation
renv::equip()
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("RColorBrewer")
install.packages("reshape2")
install.packages("here")
# to help create output files in gif or movie file format
install.packages("gifski")
install.packages("av")
# this package is for dynamic graph
install.packages("gganimate")
# to save the state of the project library to the lockfile
renv::snapshot()
# loading the library after you have installed them
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
# this package is for dynamic graph
library(gganimate)
library(here)
# loading the data in the csv file into R
df <- read.csv(here("data","AgeAdvantagesEmotionCovid_Data.csv"))
# data wrangling
# using filter to select the people who do not have jobs at present and choose 5 columns including FTP_av, avg_f_pos, avg_f_neg, avg_i_pos and avg_i_neg
not_working_df <- df %>%
filter(emp_bin=="Not_working")
not_working_df <- not_working_df %>%
select(FTP_av,avg_f_pos,avg_f_neg,avg_i_pos,avg_i_neg)
# renaming the columns to show the exact meaning
colnames(not_working_df)<-
c("time horizons",
"positive emotions frequency",
"negtive emotions frequency",
"positive emotions intensity",
"negtive emotions intensity")
# using head to inspect not_working_df
head(not_working_df)
# plotting dynamic heat map chart
# computing the correlation between these 5 columns and rounding the values in its first argument to the specified number of decimal places
# and converting the dataset to a list form
mat_df <- round(cor(not_working_df), 1)
mydata_df <- melt(mat_df)
# renaming the mydata_df columns
colnames(mydata_df)<-c("emotions1","emotions2","correlation_value")
#showing mydata_df as a correlation graph
p <- ggplot(mydata_df, aes(x = emotions1, y = emotions2, fill = correlation_value,label=correlation_value)) +
theme(axis.text.x = element_text(angle = 30, hjust = 0.5, vjust = 0.5)) +
geom_tile(colour="black") +
geom_text(size=3,colour="white")+
coord_equal()+
scale_fill_gradientn(colours=c(brewer.pal(7,"Set1")[2],"white",brewer.pal(7,"Set1")[1]),na.value=NA)
# making the correlation map into a dynamic graph
anim <- p +
transition_states(emotions1,
transition_length = 2,
state_length = 1)+
shadow_mark()+
enter_grow()+ enter_fade()+
ease_aes('cubic-in-out')  +
ggtitle('Now showing {closest_state}',
subtitle = 'Frame {frame} of {nframes}')
# displaying
anim
# saving this figure.
anim_save(filename = "image/emotions_correlation_heat_map.gif")
# renv::equip() function will download external software commonly used when compiling R packages from sources,
# and instruct R to use that software during compilation
renv::equip()
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("RColorBrewer")
install.packages("reshape2")
install.packages("here")
# to help create output files in gif or movie file format
install.packages("gifski")
install.packages("av")
# this package is for dynamic graph
install.packages("gganimate")
# to save the state of the project library to the lockfile
renv::snapshot()
# loading the library after you have installed them
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
# this package is for dynamic graph
library(gganimate)
library(here)
# loading the data in the csv file into R
df <- read.csv(here("data","AgeAdvantagesEmotionCovid_Data.csv"))
# data wrangling
# using filter to select the people who do not have jobs at present and choose 5 columns including FTP_av, avg_f_pos, avg_f_neg, avg_i_pos and avg_i_neg
not_working_df <- df %>%
filter(emp_bin=="Not_working")
not_working_df <- not_working_df %>%
select(FTP_av,avg_f_pos,avg_f_neg,avg_i_pos,avg_i_neg)
# renaming the columns to show the exact meaning
colnames(not_working_df)<-
c("time horizons",
"positive emotions frequency",
"negtive emotions frequency",
"positive emotions intensity",
"negtive emotions intensity")
# using head to inspect not_working_df
head(not_working_df)
# plotting dynamic heat map chart
# computing the correlation between these 5 columns and rounding the values in its first argument to the specified number of decimal places
# and converting the dataset to a list form
mat_df <- round(cor(not_working_df), 1)
mydata_df <- melt(mat_df)
# renaming the mydata_df columns
colnames(mydata_df)<-c("emotions1","emotions2","correlation_value")
#showing mydata_df as a correlation graph
p <- ggplot(mydata_df, aes(x = emotions1, y = emotions2, fill = correlation_value,label=correlation_value)) +
theme(axis.text.x = element_text(angle = 30, hjust = 0.5, vjust = 0.5)) +
geom_tile(colour="black") +
geom_text(size=3,colour="white")+
coord_equal()+
scale_fill_gradientn(colours=c(brewer.pal(7,"Set1")[2],"white",brewer.pal(7,"Set1")[1]),na.value=NA)
# making the correlation map into a dynamic graph
anim <- p +
transition_states(emotions1,
transition_length = 2,
state_length = 1)+
shadow_mark()+
enter_grow()+ enter_fade()+
ease_aes('cubic-in-out')  +
ggtitle('Now showing {closest_state}',
subtitle = 'Frame {frame} of {nframes}')
# displaying
anim
# saving this figure.
anim_save(filename = "../image/emotions_correlation_heat_map.gif")
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
# renv::equip() function will download external software commonly used when compiling R packages from sources,
# and instruct R to use that software during compilation
renv::equip()
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("RColorBrewer")
install.packages("reshape2")
install.packages("here")
# to help create output files in gif or movie file format
install.packages("gifski")
install.packages("av")
# this package is for dynamic graph
install.packages("gganimate")
# to save the state of the project library to the lockfile
renv::snapshot()
# loading the library after you have installed them
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
# this package is for dynamic graph
library(gganimate)
library(here)
# loading the data in the csv file into R
df <- read.csv(here("data","AgeAdvantagesEmotionCovid_Data.csv"))
# data wrangling
# using filter to select the people who do not have jobs at present and choose 5 columns including FTP_av, avg_f_pos, avg_f_neg, avg_i_pos and avg_i_neg
not_working_df <- df %>%
filter(emp_bin=="Not_working")
not_working_df <- not_working_df %>%
select(FTP_av,avg_f_pos,avg_f_neg,avg_i_pos,avg_i_neg)
# renaming the columns to show the exact meaning
colnames(not_working_df)<-
c("time horizons",
"positive emotions frequency",
"negtive emotions frequency",
"positive emotions intensity",
"negtive emotions intensity")
# using head to inspect not_working_df
head(not_working_df)
# plotting dynamic heat map chart
# computing the correlation between these 5 columns and rounding the values in its first argument to the specified number of decimal places
# and converting the dataset to a list form
mat_df <- round(cor(not_working_df), 1)
mydata_df <- melt(mat_df)
# renaming the mydata_df columns
colnames(mydata_df)<-c("emotions1","emotions2","correlation_value")
#showing mydata_df as a correlation graph
p <- ggplot(mydata_df, aes(x = emotions1, y = emotions2, fill = correlation_value,label=correlation_value)) +
theme(axis.text.x = element_text(angle = 30, hjust = 0.5, vjust = 0.5)) +
geom_tile(colour="black") +
geom_text(size=3,colour="white")+
coord_equal()+
scale_fill_gradientn(colours=c(brewer.pal(7,"Set1")[2],"white",brewer.pal(7,"Set1")[1]),na.value=NA)
# making the correlation map into a dynamic graph
anim <- p +
transition_states(emotions1,
transition_length = 2,
state_length = 1)+
shadow_mark()+
enter_grow()+ enter_fade()+
ease_aes('cubic-in-out')  +
ggtitle('Now showing {closest_state}',
subtitle = 'Frame {frame} of {nframes}')
# displaying
anim
# saving this figure.
anim_save(filename = "image/emotions_correlation_heat_map.gif")
here()
View(mydata_df)
